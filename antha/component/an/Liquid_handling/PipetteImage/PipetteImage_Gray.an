// Generates instructions to pipette out a defined image onto a defined plate by blending cyan magenta yellow and black dyes
protocol PipetteImage_Gray

import (
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/image"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/search"
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"fmt"
	"github.com/antha-lang/antha/internal/github.com/disintegration/imaging"
	)


// Input parameters for this protocol (data)
Parameters (
	VolumeForFullcolour  Volume
	Imagefilename string
	MinimumBlackpercentagethreshold float64 // as a proportion of 1 i.e. 0.5 == 50%. Below this it will be considered white
	MaxBlackPercentagethreshold float64 // above this value pure black will be dispensed
	OnlyHighVolumetips bool
	SkipWhite bool
	MixingLiquidClass string
	NonMixingClass string
	Negative bool
	Rotate bool
	AutoRotate bool
	PosterizeImage bool
	PosterizeLevels int
	DontMix bool
	CheckResizeAlgorithms bool
)

// Data which is returned from this protocol, and data types
Data (
	Numberofpixels int
	ShadesofGrey []int
	NumberofShadesofGrey int
	Skipped int
	Fullblack int
)


// Physical Inputs to this protocol with types
Inputs (
	Diluent *wtype.LHComponent
	Black *wtype.LHComponent
	//InPlate *wtype.LHPlate
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Pixels[]*wtype.LHComponent
)

Requirements {
	
}

// Conditions to run on startup
Setup {
	
}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {
	
	var blackvol Volume
	
	var maxuint8 uint8 = 255	
		
	var minuint8 uint8 
	
	var fullblackuint8 uint8
	
	ShadesofGrey = make([]int,0)
	
	chosencolourpalette := image.AvailablePalettes["Gray"]
	
	if CheckResizeAlgorithms {
	image.CheckAllResizealgorithms(Imagefilename,OutPlate,Rotate,imaging.AllResampleFilters)
	}
	
	
	positiontocolourmap, _, newimagename := image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, Rotate,AutoRotate) 
	
	// if posterize rerun 
	if PosterizeImage{
		_, Imagefilename = image.Posterize(newimagename, PosterizeLevels)
		
		positiontocolourmap, _, _ = image.ImagetoPlatelayout(Imagefilename, OutPlate, &chosencolourpalette, Rotate,AutoRotate)
	}
	
	
	solutions := make([]*wtype.LHComponent, 0)

	counter := 0
	skipped := 0
	fullblack := 0

	for locationkey, colour := range positiontocolourmap {
		
		//components := make([]*wtype.LHComponent, 0)

		var solution *wtype.LHComponent
		//var mixedsolution *wtype.LHComponent

		gray := image.ColourtoGrayscale(colour)
		
		if Negative == false {
			gray.Y = maxuint8 - gray.Y
		}
		
		
		// adjust thresholds for mixing black and white based on user parameters
		minuint8 = uint8(MinimumBlackpercentagethreshold * float64(maxuint8))
		
		fullblackuint8 = uint8(MaxBlackPercentagethreshold * float64(maxuint8))
		
		fmt.Println("brand new minuint8 ",minuint8,"fullblackuint8 ", fullblackuint8)
		
		if gray.Y < minuint8 {
			if SkipWhite {
			skipped = skipped + 1
		fmt.Println("skipping well:", skipped,locationkey)
		}else{
			whitevol := VolumeForFullcolour
			Diluent.Type = wtype.LiquidTypeFromString(NonMixingClass)
			
			waterSample := mixer.Sample(Diluent,whitevol)
			solution = MixTo(OutPlate.Type, locationkey,1, waterSample)
			solutions = append(solutions, solution)
		}
		continue
			
			}else{
			
		counter = counter + 1
		
		// check if shade of grey has already been used in image
		greyindexinpalette := chosencolourpalette.Index(colour)
		
		alreadythere := search.Contains(ShadesofGrey,greyindexinpalette)
		
		if alreadythere == false{
			ShadesofGrey = append(ShadesofGrey,greyindexinpalette)
		}
			
			if gray.Y < fullblackuint8 /*&& gray.Y >= minuint8*/{
			watervol := wunit.NewVolume((float64(maxuint8-gray.Y)/float64(maxuint8) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
			fmt.Println("new well", locationkey, "water vol", watervol.ToString())
			// force hv tip choice
			if  OnlyHighVolumetips && watervol.RawValue() < 21	 && watervol.Unit().PrefixedSymbol() == "ul"{
				watervol.SetValue(21)
			}
			waterSample := mixer.Sample(Diluent, watervol)
			//components = append(components, waterSample)
			solution = MixTo(OutPlate.Type, locationkey,1, waterSample)
		} 
		if gray.Y >= fullblackuint8{
			fullblack = fullblack + 1
			fmt.Println("full colours:", fullblack)
			blackvol = VolumeForFullcolour
		}else {
		blackvol = wunit.NewVolume((float64(gray.Y)/float64(maxuint8) * VolumeForFullcolour.RawValue()), VolumeForFullcolour.Unit().PrefixedSymbol())
		}
		
		fmt.Println("new well", locationkey, "black vol", blackvol.ToString())
		
		//Black.Type = wtype.LiquidTypeFromString("NeedToMix")
		
		if DontMix {
		Black.Type = wtype.LTDISPENSEABOVE
		}else if gray.Y >= fullblackuint8 {
		Black.Type = wtype.LiquidTypeFromString(NonMixingClass)
		}else{
			Black.Type = wtype.LiquidTypeFromString(MixingLiquidClass)
		}
		
		//fmt.Println("blackvol2",blackvol.ToString())
		if OnlyHighVolumetips && blackvol.RawValue() < 21 && blackvol.Unit().PrefixedSymbol() == "ul"{
				blackvol.SetValue(21)
			}
			
			
			
		blackSample := mixer.Sample(Black, blackvol)
		//components = append(components, blackSample)
		
		if solution != nil {
		solution = Mix(solution, blackSample)
		}else {
			solution = MixTo(OutPlate.Type, locationkey,1, blackSample)
		}
		solutions = append(solutions, solution)
		
		}
	}

	NumberofShadesofGrey = len(ShadesofGrey)
	Pixels = solutions
	Numberofpixels = len(Pixels)
	fmt.Println("Pixels =",Numberofpixels)
	Fullblack = fullblack
	Skipped = skipped

}
// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {
}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
	
}

